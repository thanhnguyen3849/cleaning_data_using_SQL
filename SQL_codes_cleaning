# CODES CLEANING DATA IN SQL
(NOTE: The format for coding in SQL is instrinsic to its own environment, which is the MS SSMS)

-- Preview the data 
Select *
From p_project.dbo.NashvilleHousing

-- 1. Standardize Data Format 

Select SaleDateConverted --,CONVERT (Date, SaleDate)
From p_project.dbo.NashvilleHousing

Alter table NashvilleHousing
Add SaleDateConverted Date;

Update NashvilleHousing
Set SaleDateConverted = CONVERT (Date, SaleDate)

-- 2. Populate Property Address Data
Select *
From p_project.dbo.NashvilleHousing
Where PropertyAddress is null 

-- A closer look shows that some of the PropertyAddress are null
-- Maybe a missing values, or need more investigation
-- This method of investigation is meant to trace the property address that is null because it has been used before somewhere

Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress
From p_project.dbo.NashvilleHousing a
Join p_project.dbo.NashvilleHousing b
	on a.ParcelID = b.ParcelID
	and a.[UniqueID] <> b.[UniqueID]
Where a.PropertyAddress is null

-- We have the address for the null PropertyAddress but we did not populate it
Select a1.ParcelID, a1.PropertyAddress, b1.ParcelID, b1.PropertyAddress--, ISNULL (a1.PropertyAddress, b1.PropertyAddress)
From p_project.dbo.NashvilleHousing a1
Join p_project.dbo.NashvilleHousing b1
	on a1.ParcelID = b1.ParcelID
	and a1.[UniqueID] <> b1.[UniqueID]
Where a1.PropertyAddress is null

UPDATE a1
SET PropertyAddress = ISNULL (a1.PropertyAddress, b1.PropertyAddress)
From p_project.dbo.NashvilleHousing a1
Join p_project.dbo.NashvilleHousing b1
	on a1.ParcelID = b1.ParcelID
	and a1.[UniqueID] <> b1.[UniqueID]
Where a1.PropertyAddress is null

-- 3. Breaking out Address into individual columns (Address, City, State)
-- 3.1. Select the address inluding the number and street name as "Address"
Select SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)) as Address 
From p_project.dbo.NashvilleHousing
-- But this code is going to include the ',' comma in our Address, so we have to fix it a little bit

Select SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1) as Address 
From p_project.dbo.NashvilleHousing
-- For the code above, as we add a minus 1 (-1) in our third argument in the SUBSTRING function, the CHARINDEX will include everything
-- Until the ',' commna then minus 1, which is what we want

-- 3.2. Select the name for "City"
Select SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1) as Address,
	SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(PropertyAddress)) as City 
From p_project.dbo.NashvilleHousing

--3.3. Create new columns to add these new information to the table

ALTER TABLE NashvilleHousing
Add PropertyAddressNew Nvarchar(255);
ALTER TABLE NashvilleHousing
Add PropertyCityNew Nvarchar(255);

UPDATE NashvilleHousing
Set PropertyAddressNew = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1)

UPDATE NashvilleHousing
Set PropertyCityNew = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(PropertyAddress))

Select *
From p_project.dbo.NashvilleHousing

-- 3.4. Now we do the "OwnerAddress" using other functions
-- PARSENAME is kinda doing things backwards
-- But before PARSENAME can work, we have to change "," into "." 
Select
PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3),
PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2),
PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1)
From p_project.dbo.NashvilleHousing

-- 3.5. Now we add them into new columns into the table
ALTER TABLE NashvilleHousing
Add OwnerAddressNew Nvarchar(255);
ALTER TABLE NashvilleHousing
Add OwnerCityNew Nvarchar(255);
ALTER TABLE NashvilleHousing
Add OwnerStateNew Nvarchar(255);

UPDATE NashvilleHousing
Set OwnerAddressNew = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3)
UPDATE NashvilleHousing
Set OwnerCityNew = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2)
UPDATE NashvilleHousing
Set OwnerStateNew = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1)

Select *
From p_project.dbo.NashvilleHousing


